(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{450:function(a,t,s){"use strict";s.r(t);var n=s(27),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"hashmap细节剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap细节剖析"}},[a._v("#")]),a._v(" HashMap细节剖析")]),a._v(" "),s("h3",{attrs:{id:"开头先推荐几篇文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开头先推荐几篇文章"}},[a._v("#")]),a._v(" 开头先推荐几篇文章")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/aobing/p/12057282.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/aobing/p/12057282.html"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_1-hashmap的存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashmap的存储结构"}},[a._v("#")]),a._v(" 1.HashMap的存储结构？")]),a._v(" "),s("p",[a._v("在JDK1.7中 由数组和链表组成，当出现hash冲突的时候，就会采用拉链法解决。")]),a._v(" "),s("p",[a._v("在JDK1.8时，由数组+链表+红黑树组成。当链表过长时，则会严重影响hashmap性能，这时会转化为红黑树，红黑树的搜索时间复杂度为Ologn，而链表为On。")]),a._v(" "),s("p",[a._v("当链表长度大于8，数组长度大于64时，才会转化为红黑树。")]),a._v(" "),s("p",[a._v("将链表转化为红黑树前会进行判断，如果当前数组长度小于64，就会进行数组扩容，而不是转化为红黑树，以减少搜索时间。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/zhangrenfeng/images/raw/master/img/20210910192316.png",alt:"12"}})]),a._v(" "),s("p",[a._v("相关面试题：")]),a._v(" "),s("blockquote",[s("p",[a._v("1.为什么在解决hash冲突时，不直接使用红黑树，而是选择先用链表，再用红黑树？")])]),a._v(" "),s("p",[a._v("因为红黑树需要进行左旋右旋和变色来保持平衡，而单链表不需要，在元素小于8个的时候，此时的查询操作，链表结构已经能够保证查询性能了。当元素大于8个的时候，红黑树的搜索时间复杂度为Ologn，链表为On，此时需要红黑树来加快查询速度，但是新增效率却变慢了。")]),a._v(" "),s("p",[a._v("因此，如果一开始就使用了红黑树，元素太少，新增效率又慢，无疑是浪费性能的。")]),a._v(" "),s("blockquote",[s("p",[a._v("2.不用红黑树，用二叉查找树可以吗？")])]),a._v(" "),s("p",[a._v("可以。但是二叉查找树会在某些特殊情况下变成一条线性结构，这样就跟原来使用链表一样了，遍历查找速度会变慢。")]),a._v(" "),s("blockquote",[s("p",[a._v("3.Hashmap中的链表大小超过八个时会自动转化为红黑树，当小于六时重新变为链表，为啥呢？")])]),a._v(" "),s("p",[a._v("根据泊松分布，在负载因子默认为0.75的时候，单个hash槽内元素个数为8的概率小于百万分之一，所以将7作为一个分水岭，等于7的时候不转换，大于等于8的时候才进行转换，小于等于6的时候就化为链表。")]),a._v(" "),s("p",[a._v("红黑树转链表的阈值为6，主要是因为，如果也将该阈值设置于8，那么当hash碰撞在8时，会反生链表和红黑树的不停相互激荡转换，白白浪费资源。")]),a._v(" "),s("blockquote",[s("p",[a._v("4.HashMap的默认加载因子为什么是0.75？不能是0.6或0.8呢？")])]),a._v(" "),s("p",[a._v("HashMap的默认构造函数：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("             "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 容纳键值对的最大值")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" loadFactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 负载因子")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" modCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("Node[] table的初始化长度length(默认值是16)，Load factor为负载因子(默认值是0.75)，threshold是HashMap所能容纳键值对的最大值。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。")]),a._v(" "),s("p",[a._v("默认的loadFactor是0.75，0.75是对空间和时间效率的一个平衡选择，一般不要修改，除非在时间和空间比较特殊的情况下 ：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值 。")])]),a._v(" "),s("li",[s("p",[a._v("相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。")])])]),a._v(" "),s("p",[a._v("我们来追溯下作者在源码中的注释（JDK1.7）：")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("As")]),a._v(" a general rule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" the "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" load factor "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v(".75")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" offers a good tradeoff between time and space "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("costs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v(" Higher")]),a._v(" values decrease the space overhead but increase the lookup cost "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("reflected in most of the operations of the "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" including get and put"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("The")]),a._v(" expected number of entries in the map and its load factor should be taken into account when setting its initial capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" so as "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("minimize")]),a._v(" the number of rehash "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("operations"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v(" If")]),a._v(" the initial capacity is greater than the maximum number of entries divided by the load factor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" no rehash operations will ever occur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("翻译过来大概的意思是：作为一般规则，默认负载因子（0.75）在时间和空间成本上提供了很好的折衷。较高的值会降低空间开销，但提高查找成本（体现在大多数的HashMap类的操作，包括get和put）。设置初始大小时，应该考虑预计的entry数在map及其负载系数，并且尽量减少rehash操作的次数。如果初始容量大于最大条目数除以负载因子，rehash操作将不会发生。")]),a._v(" "),s("h3",{attrs:{id:"_2-索引结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-索引结构"}},[a._v("#")]),a._v(" 2.索引结构")]),a._v(" "),s("blockquote",[s("p",[a._v("1.hashmap中的key的存储索引是如何计算的？")])]),a._v(" "),s("p",[s("a",{attrs:{href:"https://dateolive.github.io/interview/pages/9fb2bc/#_12-hashmap%E4%B8%ADkey%E7%9A%84%E5%AD%98%E5%82%A8%E7%B4%A2%E5%BC%95%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dateolive.github.io/interview/pages/9fb2bc/#_12-hashmap中key的存储索引是如何计算出来的"),s("OutboundLink")],1)]),a._v(" "),s("blockquote",[s("p",[a._v("2.JDK1.8 为什么要 hashcode 异或其右移十六位的值？")])]),a._v(" "),s("p",[a._v("因为在JDK 1.7 中扰动了 4 次，计算 hash 值的性能会稍差一点点。 从速度、功效、质量来考虑，JDK1.8 优化了高位运算的算法，通过hashCode()的高16位异或低16位实现：(h = k.hashCode()) ^ (h >>> 16)。这么做可以在数组 table 的 length 比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。")]),a._v(" "),s("blockquote",[s("p",[a._v("3.为什么hash值要与length-1相与？")])]),a._v(" "),s("ul",[s("li",[a._v("把hash值对数组长度取模，模运算消耗大，没有位运算快")]),a._v(" "),s("li",[a._v("当length总是2的n次方时，h&(length-1)等价于对length取模，而位运算比取模更快。")])]),a._v(" "),s("blockquote",[s("p",[a._v("4.HashMap数组的长度为什么是 2 的幂次方？")])]),a._v(" "),s("p",[a._v("这样做效果上等同于取模，在速度、效率上比直接取模要快得多。除此之外，2 的 N 次幂有助于减少碰撞的几率。如果 length 为2的幂次方，则 length-1 转化为二进制必定是11111……的形式，在与h的二进制与操作效率会非常的快，而且空间不浪费。")]),a._v(" "),s("h3",{attrs:{id:"_3-hashmap的put方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-hashmap的put方法"}},[a._v("#")]),a._v(" 3.HashMap的put方法？")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://dateolive.github.io/interview/pages/9fb2bc/#_13-hashmap%E7%9A%84put%E6%B5%81%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dateolive.github.io/interview/pages/9fb2bc/#_13-hashmap的put流程"),s("OutboundLink")],1)]),a._v(" "),s("blockquote",[s("p",[a._v("关于在JDK1.7和JDK1.8中put的区别和线程安全问题")])]),a._v(" "),s("p",[a._v("可以看这篇 "),s("a",{attrs:{href:"https://dateolive.github.io/interview/pages/9fb2bc/#_16-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4hashmap%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dateolive.github.io/interview/pages/9fb2bc/#_16-为什么说hashmap线程不安全"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_4-hashmap的扩容机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-hashmap的扩容机制"}},[a._v("#")]),a._v(" 4.HashMap的扩容机制？")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://dateolive.github.io/interview/pages/9fb2bc/#_14-hashmap%E7%9A%84%E6%89%A9%E5%AE%B9%E6%96%B9%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dateolive.github.io/interview/pages/9fb2bc/#_14-hashmap的扩容方式"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_6-hashmap的线程安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-hashmap的线程安全问题"}},[a._v("#")]),a._v(" 6.hashMap的线程安全问题？")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://dateolive.github.io/interview/pages/9fb2bc/#_16-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4hashmap%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://dateolive.github.io/interview/pages/9fb2bc/#_16-为什么说hashmap线程不安全"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_5-其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-其他"}},[a._v("#")]),a._v(" 5. 其他")]),a._v(" "),s("blockquote",[s("p",[a._v("还知道哪些hash算法？")])]),a._v(" "),s("p",[a._v("Hash函数是指把一个大范围映射到一个小范围，目的往往是为了节省空间，使得数据容易保存。 比较出名的有MurmurHash、MD4、MD5等等。")]),a._v(" "),s("blockquote",[s("p",[a._v("key 可以为 Null 吗?")])]),a._v(" "),s("p",[a._v("可以，key 为 Null 的时候，hash算法最后的值以0来计算，也就是放在数组的第一个位置。")]),a._v(" "),s("blockquote",[s("p",[a._v("一般用什么作为HashMap的key?")])]),a._v(" "),s("p",[a._v("一般用Integer、String 这种不可变类当 HashMap 当 key，而且 String 最为常用。")]),a._v(" "),s("ul",[s("li",[a._v("因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。这就是 HashMap 中的键往往都使用字符串的原因。")]),a._v(" "),s("li",[a._v("因为获取对象的时候要用到 equals() 和 hashCode() 方法，那么键对象正确的重写这两个方法是非常重要的,这些类已经很规范的重写了 hashCode() 以及 equals() 方法。")])]),a._v(" "),s("blockquote",[s("p",[a._v("用可变类当 HashMap 的 key 有什么问题?")])]),a._v(" "),s("p",[a._v("hashcode 可能发生改变，导致 put 进去的值，无法 get 出。如下所示")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" changeMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" objectValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nchangeMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" objectValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("changeMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nlist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//hashcode发生了改变")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("changeMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("输出值如下")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Object")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@74a14482")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);